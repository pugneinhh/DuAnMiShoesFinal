import React, { useEffect, useState } from 'react'
import { LoadingOutlined, PlusOutlined } from '@ant-design/icons';
import { Button, Card, Col, DatePicker, Divider, Form, Input, message, Modal, Radio, Row, Select, Upload } from 'antd';
import { FaMoneyBills, FaQrcode } from 'react-icons/fa6';
import { QrReader } from 'react-qr-reader';
import { BsQrCodeScan } from 'react-icons/bs';
import UpLoadImage from './UploadAnh';
import { AddressApi } from '../api/address/AddressApi';
import { Link, useNavigate } from 'react-router-dom';
import { NhanVienAPI } from '../api/user/nhanVien.api';

import { ToastContainer, toast } from 'react-toastify';
export default function AddNhanVien() {

  const [form] = Form.useForm();
  const [fileImage, setFileIamge] = useState(null);
  const [listProvince, setListProvince] = useState([]);
  const [listDistricts, setListDistricts] = useState([]);
  const [listWard, setListWard] = useState([]);
  const nav = useNavigate();

  const handleFileUpload = (fileData) => {
    setFileIamge(fileData);
  };

  const [showModal, setShowModal] = useState(false);

  const handleScanButtonClick = () => {
    setShowModal(true);
  };

  const handleModalClose = () => {
    setShowModal(false);
  };

  const loadDataProvince = () => {
    AddressApi.fetchAllProvince().then((res) => {
      setListProvince(res.data.data);
    });
  };

  const [province, setProvince] = useState(null);
  const [district, setDistrict] = useState(null);
  const [ward, setWard] = useState(null);

  const handleProvinceChange = (value, valueProvince) => {
    form.setFieldsValue({ provinceId: valueProvince.valueProvince });
    AddressApi.fetchAllProvinceDistricts(valueProvince.valueProvince).then(
      (res) => {
        setListDistricts(res.data.data);
      }
    );
    setProvince(valueProvince);
  };

  const handleDistrictChange = (value, valueDistrict) => {
    form.setFieldsValue({ toDistrictId: valueDistrict.valueDistrict });
    AddressApi.fetchAllProvinceWard(valueDistrict.valueDistrict).then((res) => {
      setListWard(res.data.data);
    });
    setDistrict(valueDistrict);
  };

  const handleWardChange = (value, valueWard) => {
    form.setFieldsValue({ wardCode: valueWard.valueWard });
    setWard(valueWard);
  };

  useEffect(() => {
    loadDataProvince();
  }, []);

  // QR code
  const [qrResult, setQrResult] = useState("");

  const handleQRResult = (result) => {
    if (result != null) {
      setShowModal(false);
    }
    setQrResult(result);
  };

  const handleSuccess = () => {
    form
      .validateFields()
      .then((values) => {
        if (fileImage === null) {
          message.error("Vui l√≤ng ch·ªçn ·∫£nh ƒë·∫°i di·ªán.");
        }
        const data = {
          ...values,
          ngaySinh: values.ngaySinh
            ? new Date(values.ngaySinh).getTime()
            : null,
          idThanhPho: province.key,
          idHuyen: district.key,
          idXa: ward.key,
        };
        const formData = new FormData();
        formData.append(`file`, fileImage);
        formData.append("request", JSON.stringify(data));
        NhanVienAPI.create(formData)
        
          .then((result) => {
          
            nav("/nhan-vien");
            toast('ü¶Ñ Th√™m Th√†nh c√¥ng!', {
              position: "top-right",
              autoClose: 3000,
              hideProgressBar: false,
              closeOnClick: true,
              pauseOnHover: true,
              draggable: true,
              progress: undefined,
              theme: "light",
              
            });
          })
          .catch((error) => {
            console.log(error);
          });
      })
      .catch(() => {
        toast('ü¶Ñ Th√™m Th·∫•t b·∫°i!', {
          position: "top-right",
          autoClose: 3000,
          hideProgressBar: false,
          closeOnClick: true,
          pauseOnHover: true,
          draggable: true,
          progress: undefined,
          theme: "light",
        });
      });
  };

  ////qu√©t QR s·∫£n ph·∫©m
  const [openScan, setOpenScan] = useState(false);
  const [qrData, setQrData] = useState('');
  const handleCloseScan = () => {
    setOpenScan(false);
  }
  const handleScan = (data) => {
    if (data) {
      setQrData(data);
      // G·ª≠i d·ªØ li·ªáu m√£ QR l√™n server ·ªü ƒë√¢y
    }
  };

  const handleError = (err) => {
    console.error(err);
  };
  return (
    <>
      <h1>
       
         <Divider orientation="center" color="none">
          <h3 className="text-first  fw-bold">
            <FaMoneyBills /> Th√™m nh√¢n vi√™n
          </h3>
        </Divider>

      </h1>
      <Form form={form}
        layout="vertical"
      >
        <Row gutter={16} style={{ marginTop: "30px" }}>
          <Col span={7}>
            <Card style={{ height: "100%" }}>
              <h5 className='text-center fw-bold'>·∫¢nh ƒë·∫°i di·ªán</h5>
              <Row className='text-center mt-5'>
                <UpLoadImage  onFileUpload={handleFileUpload} />
              </Row>
            </Card>
          </Col>
          <Col span={17}>
            <Card style={{ height: "100%" }}>
              <h5 className='text-center fw-bold'>Th√¥ng tin nh√¢n vi√™n</h5>
              <Row
                justify="end"
                align="middle"
                style={{ marginBottom: "15px", marginTop: "10px" }}
                
              >
                <Col span={11}>
                  <Button
                    onClick={handleScanButtonClick}
                    style={{
                      width: "150px",
                      height: "40px",
                      margin: "0 10px 10px 10px ",
                      backgroundColor: "#3366CC",
                      color: "white",
                    }}
                  >
                    {/* <FontAwesomeIcon icon={FaQrcode} /> */}
                    <span style={{ marginLeft: "10px" }}>QR-CƒÉn c∆∞·ªõc</span>
                  </Button>
                  {/* {showModal && (
                    <QRScannerModal
                      visible={showModal}
                      onCancel={handleModalClose}
                      onQRResult={handleQRResult}
                    />
                  )} */}
                 
                  
                   
               
                </Col>
              </Row>
              <Row>
                <Col span={11} style={{ marginRight: "20px" }}  >
                  <Form.Item
                    name="ten"
                    label="H·ªç v√† t√™n"
                    tooltip="H·ªç t√™n ƒë·∫ßy ƒë·ªß c·ªßa b·∫°n l√† g√¨?"
                    
                    rules={[
                      {
                        required: true,
                        message: "Vui l√≤ng h√£y nh·∫≠p h·ªç v√† t√™n.",
                        whitespace: true,
                      },
                      {
                        pattern: /^[A-Za-z√Ä-·ª∏√†-·ªπ\s]+$/,
                        message: "H·ªç v√† t√™n ch·ªâ ƒë∆∞·ª£c ph√©p ch·ª©a ch·ªØ c√°i.",
                      },
                    ]}
                    // labelCol={{ span: 9 }}
                    // wrapperCol={{ span: 15 }}
                  >
                    <Input
                      onKeyPress={(e) => {
                        if (e.key === " " && e.target.selectionStart === 0) {
                          e.preventDefault();
                        }
                      }}
                      // style={{ textAlign: "center" }}
                    />
                  </Form.Item>
                  <Form.Item
                    name="canCuocCongDan"
                    label="CƒÉn c∆∞·ªõc"
                    tooltip="CƒÉn c∆∞·ªõc c√¥ng d√¢n c·ªßa b·∫°n l√† g√¨?"
                    rules={[
                      {
                        required: true,
                        message: "Vui l√≤ng h√£y nh·∫≠p cƒÉn c∆∞·ªõc c√¥ng d√¢n.",
                        whitespace: true,
                      },
                      {
                        pattern: /^\d{12}$/,
                        message: "CƒÉn c∆∞·ªõc c√¥ng d√¢n c·∫ßn ph·∫£i 12 ch·ªØ s·ªë.",
                      },
                    ]}
                    // labelCol={{ span: 9 }}
                    // wrapperCol={{ span: 15 }}
                  >
                    <Input  />
                  </Form.Item>
                  <Form.Item
                    name="gioiTinh"
                    label="Gi·ªõi t√≠nh"
                    tooltip="Gi·ªõi t√≠nh c·ªßa b·∫°n l√† g√¨?"
                    rules={[
                      {
                        required: true,
                        message: "Vui l√≤ng h√£y ch·ªçn gi·ªõi t√≠nh.",
                        whitespace: true,
                      },
                    ]}
                    // labelCol={{ span: 9 }}
                    // wrapperCol={{ span: 15 }}
                  >
                    <Select defaultValue={""}>
                      <Select.Option value="">Ch·ªçn gi·ªõi t√≠nh</Select.Option>
                      <Select.Option value="true">Nam</Select.Option>
                      <Select.Option value="false">N·ªØ</Select.Option>
                    </Select>
                  </Form.Item>
                  <Form.Item
                    name="tenThanhPho"
                    label="T·ªânh/Th√†nh ph·ªë"
                    tooltip="T·ªânh/Th√†nh ph·ªë c·ªßa b·∫°n l√† g√¨?"
                    rules={[
                      {
                        required: true,
                        message: "Vui l√≤ng h√£y ch·ªçn T·ªânh/Th√†nh ph·ªë.",
                        whitespace: true,
                      },
                    ]}
                    // labelCol={{ span: 9 }}
                    // wrapperCol={{ span: 15 }}
                  >
                    <Select defaultValue={""} onChange={handleProvinceChange}>
                      <Select.Option value="">
                        --Ch·ªçn T·ªânh/Th√†nh ph·ªë--
                      </Select.Option>
                      {listProvince?.map((item) => {
                        return (
                          <Select.Option
                            key={item.ProvinceID}
                            value={item.ProvinceName}
                            valueProvince={item.ProvinceID}
                          >
                            {item.ProvinceName}
                          </Select.Option>
                        );
                      })}
                    </Select>
                  </Form.Item>
                  <Form.Item
                    name="tenXa"
                    label="X√£/Ph∆∞·ªùng"
                    tooltip="X√£/Ph∆∞·ªùng c·ªßa b·∫°n l√† g√¨?"
                    rules={[
                      {
                        required: true,
                        message: "Vui l√≤ng h√£y ch·ªçn X√£/Ph∆∞·ªùng.",
                        whitespace: true,
                      },
                    ]}
                    // labelCol={{ span: 9 }}
                    // wrapperCol={{ span: 15 }}
                  >
                    <Select defaultValue={""} onChange={handleWardChange}>
                      <Select.Option value="">--Ch·ªçn X√£/Ph∆∞·ªùng--</Select.Option>
                      {listWard?.map((item) => {
                        return (
                          <Select.Option
                            key={item.WardCode}
                            value={item.WardName}
                            valueWard={item.WardCode}
                          >
                            {item.DistrictName}
                          </Select.Option>
                        );
                      })}
                    </Select>
                  </Form.Item>
                </Col>
                <Col span={11} style={{ marginRight: "20px" }}>
                  <Form.Item
                    name="ngaySinh"
                    label="Ng√†y sinh"
                    tooltip="Ng√†y sinh c·ªßa b·∫°n l√† g√¨?"
                    rules={[
                      {
                        required: true,
                        message: "Vui l√≤ng h√£y nh·∫≠p ng√†y sinh.",
                        whitespace: true,
                      },
                    ]}
                    // labelCol={{ span: 9 }}
                    // wrapperCol={{ span: 15 }}
                  >
                    <Input type="date" style={{ textAlign: "center" }} />
                  </Form.Item>

                  <Form.Item
                    name="email"
                    label="Email"
                    tooltip="Email c·ªßa b·∫°n l√† g√¨?"
                    rules={[
                      {
                        required: true,
                        message: "Vui l√≤ng h√£y nh·∫≠p email.",
                        whitespace: true,
                      },
                      {
                        type: "email",
                        message: "Vui l√≤ng nh·∫≠p ƒë√∫ng ƒë·ªãnh d·∫°ng email.",
                      },
                    ]}
                    // labelCol={{ span: 9 }}
                    // wrapperCol={{ span: 15 }}
                  >
                    <Input />
                  </Form.Item>
                  <Form.Item
                    name="soDienThoai"
                    label="S·ªë ƒëi·ªán tho·∫°i"
                    tooltip="S·ªë ƒëi·ªán tho·∫°i c·ªßa b·∫°n l√† g√¨?"
                    rules={[
                      {
                        required: true,
                        message: "Vui l√≤ng h√£y nh·∫≠p s·ªë ƒëi·ªán tho·∫°i.",
                        whitespace: true,
                      },
                      {
                        pattern: /^0\d{9}$/,
                        message: "Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i h·ª£p l·ªá.",
                      },
                    ]}
                    // labelCol={{ span: 9 }}
                    // wrapperCol={{ span: 15 }}
                  >
                    <Input  />
                  </Form.Item>
                  <Form.Item
                    name="tenHuyen"
                    label="Qu·∫≠n/Huy·ªán"
                    tooltip="Qu·∫≠n/Huy·ªán c·ªßa b·∫°n l√† g√¨?"
                    rules={[
                      {
                        required: true,
                        message: "Vui l√≤ng h√£y ch·ªçn Qu·∫≠n/Huy·ªán.",
                        whitespace: true,
                      },
                    ]}
                    // labelCol={{ span: 9 }}
                    // wrapperCol={{ span: 15 }}
                  >
                    <Select defaultValue={""} onChange={handleDistrictChange}>
                      <Select.Option value="">
                        --Ch·ªçn Qu·∫≠n/Huy·ªán--
                      </Select.Option>
                      {listDistricts?.map((item) => {
                        return (
                          <Select.Option
                            key={item.DistrictID}
                            value={item.DistrictName}
                            valueDistrict={item.DistrictID}
                          >
                            {item.DistrictName}
                          </Select.Option>
                        );
                      })}
                    </Select>
                  </Form.Item>
                  <Form.Item
                    name="diaChi"
                    label="S·ªë nh√†"
                    tooltip="S·ªë nh√† c·ªßa b·∫°n l√† g√¨?"
                    rules={[
                      {
                        required: true,
                        message: "Vui l√≤ng h√£y nh·∫≠p s·ªë nh√†.",
                        whitespace: true,
                      },
                    ]}
                    // labelCol={{ span: 9 }}
                    // wrapperCol={{ span: 15 }}
                  >
                    <Input  />
                  </Form.Item>
                </Col>
                <Button
                  onClick={

                    handleSuccess
                  }
                  style={{
                    width: "110px",
                    height: "40px",
                    margin: "0 10px 10px 10px ",
                    backgroundColor: "#3366CC",
                    color: "white",
                  }}
                  // htmlType="reset"
                >
                  Ho√†n t·∫•t
                </Button>

                <Link to={'/nhan-vien'} className='btn btn-danger' style={{
                  width: "110px",
                  height: "40px",
                  margin: "0 10px 10px 10px ",
                  backgroundColor: "#3366CC",
                  color: "white",
                }}>H·ªßy</Link>

              </Row>
      
            </Card>
          </Col>
        </Row>
      </Form>
      <ToastContainer
        position="top-right"
        autoClose={5000}
        hideProgressBar={false}
        newestOnTop={false}
        closeOnClick
        rtl={false}
        pauseOnFocusLoss
        draggable
        pauseOnHover
        theme="light"
      />
      <ToastContainer />
    </>

  )

}
